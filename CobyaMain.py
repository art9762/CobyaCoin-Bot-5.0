import telebot
import config as cf
import support as sp
import time as tm
import random as r
import TableLib as db
import os
import threading
from PIL import Image
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.switch_backend('agg')

bot = telebot.TeleBot(cf.test)

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—Å—è–∫–æ–µ —Ç–∞–∫–æ–µ



burse = []
price = 0
coin = 0
nft_n = ""
nft_p = 0
usern = ''
pr = ''
sc = ''
history = []
am = []
am = db.getMas('coins_amount.txt')
coins_am = int(am[0][0])
cl_am = int(am[0][1])
video_am = int(am[0][2])
print(coins_am)
h = db.getCols("history.txt")
for i in h:
    history.append(int(i[0]))
print(history)
x = ["0"]
y = ["0"]
sp.update()
#print(tm.ctime(1694548849))
center_bank_leaves = int(db.getMas('center')[0][0])
center_bank_coins = int(db.getMas('center')[1][0])
name = ''
course = int(db.getMas('course')[len(db.getMas('course'))-1][0])
transactions = int(db.getMas('course')[len(db.getMas('course'))-1][1])
videocards_course = int(db.getMas('course')[len(db.getMas('course'))-1][2])
jackpot = int(db.getMas('course')[len(db.getMas('course'))-1][3])
burse_timer = 0
planka = 5000
torg = True
normal_course = 100
transactions_as_hour = 0
videocards_transactions_as_hour = 0

timer = 0

admins = ["@IL76pd", "@societykolyan", "@unlucky_POvelitel" , '@Dan9kov']
ban = ['@Hv2_0' , '@user1864926' , '@unknown_user63594', '@NEGRA0956']
promocodeL = ["K9x7", "R2g6", "T3d8", "M4h5", "L6y2", "J1p9", "F5a2", "N8z1", "D7b3", "G2s4", "#KamilaChiter"]
promocodeC = ["Q4x8", "P7g3", "R2d6", "S3h8", "M5l4", "L6f2", "K1p9", "J5a2", "F8z1", "N7b3", "D2s4"]


def sum_of_last_10_elements(arr):
    if len(arr) <= 5:
        return sum(arr)
    else:
        return sum(arr[-5:])
    
def median(numbers):
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)
    
    if n % 2 == 0:
        middle1 = sorted_numbers[n//2 - 1]
        middle2 = sorted_numbers[n//2]
        return (middle1 + middle2) / 2
    else:
        return sorted_numbers[n//2]
    
def number_to_emoji(number):
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
    emoji_map = {
        '0': '0Ô∏è‚É£',
        '1': '1Ô∏è‚É£',
        '2': '2Ô∏è‚É£',
        '3': '3Ô∏è‚É£',
        '4': '4Ô∏è‚É£',
        '5': '5Ô∏è‚É£',
        '6': '6Ô∏è‚É£',
        '7': '7Ô∏è‚É£',
        '8': '8Ô∏è‚É£',
        '9': '9Ô∏è‚É£'
    } 
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–¥–º–µ–Ω–∞ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã –Ω–∞ —ç–º–æ–¥–∑–∏
    return ''.join(emoji_map[digit] for digit in str(number))

    
def auction_update():
    try:
        auc = db.getMas("auction.txt")
        users = db.getMas('users.txt')
        auc2 = []
        for i in range(len(auc)):
            seller = db.find_string(users, auc[i][0])
            if auc[i][5] != 'none':
                buyer = db.find_string(users, auc[i][5])
                if int(round(tm.time()))-int(auc[i][4]) > 10*60*60:
                    seller_cb = int(users[seller][2])+int(auc[i][2])
                    buyer_cb = int(users[buyer][2])-int(auc[i][2])

                    users[seller][2] = seller_cb
                    users[buyer][2]=buyer_cb
                    
                    bot.send_message(users[buyer][3], f"üîî–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {auc[i][1]}")
                    bot.send_message(users[seller][3], f"üîî{auc[i][5]} –ø—Ä–∏–æ–±—Ä–µ–ª –≤–∞—à —Ç–æ–≤–∞—Ä –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ {auc[i][2]}")

                    if auc[i][3] != "#@#":
                        os.remove(auc[i][3])

                    db.wrTo(users, 'users.txt')
                    
                else:
                    auc2.append(auc[i])
            else:
                auc2.append(auc[i])
        
        auc = auc2
        db.wrTo(auc, 'auction.txt')
    except Exception as e:
        print(e, "auc_update")
        pass

    
def center_bank():
    auction_update()
    sp.update()
    try:
        
        global course
        global center_bank_leaves
        global center_bank_coins
        global transactions
        global transactions_as_hour
        global burse_timer
        global planka
        global torg
        global normal_course
        ce = db.getMas("center")
        us = db.getMas("users.txt")
        burse = db.getMas("burse.txt")

        if not(torg) and int(tm.time()) - burse_timer > 900 and burse_timer != 0:
            burse_timer = 0
            torg =True

        if course > planka and burse_timer == 0 and torg:
            torg = False
            burse_timer = int(tm.time())
            course = normal_course
        
        print(torg, burse_timer, course)
        
        if center_bank_coins < 2000:
            center_bank_leaves -= course*(2000-center_bank_coins)
            center_bank_coins += 2000-center_bank_coins
        leng = len(burse)
        sc = 0
        burse2 = []
        for sc in range(len(burse)):
            if not(int(round(tm.time())) - int(burse[sc][3]) > 172800):
                burse2.append(burse[sc])

        burse = burse2

        am = db.getMas('coins_amount.txt')
        am[0][1] = str(cl_am)
        am[0][0] = str(coins_am)
        am[0][2] = str(video_am)
        db.wrTo(am, 'coins_amount.txt')

        cr = [str(course), str(transactions), str(videocards_course), str(jackpot)]
        db.addMass(cr, 'course')
        
        if len(burse) > 51:
            while len(burse) > 51:
                ch = r.randint(1, len(burse)-1)
                seller = db.find_string(us, burse[int(ch)][0])
                if int(burse[int(ch)][1]) < center_bank_leaves:
                    sel_coin = int(us[seller][2])-int(burse[int(ch)][1])
                    sel_leave = int(us[seller][1])+int(burse[int(ch)][2])
                    us[seller][1] = str(sel_leave)
                    us[seller][2] = str(sel_coin)

                    center_bank_leaves -= int(burse[int(ch)][2])
                    center_bank_coins += int(burse[int(ch)][1])
                    
                    ce[0][0] = str(center_bank_leaves)
                    ce[1][0] = str(center_bank_coins)

                    db.wrTo(ce,"center")

                    transactions += 1
                    history.append(int(burse[int(ch)][2])//int(burse[int(ch)][1]))
                    db.addMass([str(int(burse[int(ch)][2])//int(burse[int(ch)][1]))], "history.txt")
                    c = sum_of_last_10_elements(history)
                    course = c//transactions
                    abv = int(burse[int(ch)][2])
                    #print("adasdasdas")
                    bot.send_message(us[seller][3], f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–º! \n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {abv} –∫–æ–∏–Ω–æ–≤")
                    del burse[int(ch)]
                else:
                    break

        db.wrTo(us, 'users.txt')
            
        db.wrTo(burse, 'burse.txt')
    except Exception as e:
        print("–¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ —Ñ—É–Ω–∫—Ü–∏—è", e)
        pass


def update_page(page=0):
    ITEMS_PER_PAGE = 10
    burse = db.getMas("burse.txt")
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    if start_index >= len(burse):
        start_index = 0
    if end_index >= len(burse):
        end_index = len(burse)

    out = ''

    if len(burse) > 0:
        for i in range(start_index, end_index):
            out += str(i+1) + '. ' + burse[i][0] + ' (' + str(round((tm.time()-int(burse[i][3]))/3600)) + '—á' +') –ø—Ä–æ–¥–∞—ë—Ç ' + burse[i][1] + ' CBC –∑–∞ ' + burse[i][2] + ' –∫.–ª.'+ '\n' + '\n'
        return out
    else:
        return "–ë–∏—Ä–∂–∞ –ø—É—Å—Ç–∞("
    
def split_list_into_chunks(lst, chunk_size=20):
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]
    
center_bank()


def mining_update():
    global coins_am
    global cl_am
    global video_am
    am = db.getMas('coins_amount.txt')
    mg = db.getMas('mining.txt')
    us = db.getMas("users.txt")
    new_mg = []
    for item in mg:
        user = db.find_string(us, item[0])
        speed = int(item[2])
        time = int(item[3])
        last = int(item[4])
        
        pribl = speed*0.1*int(round(tm.time()-time, 0)//3600.0)

        if coins_am-int(pribl//1) > 0:
            last += int(pribl//1)
            if user != None:
                us[user][2] = int(us[user][2])+int(pribl//1)
                db.wrTo(us, "users.txt")
                coins_am -= int(pribl//1)
            if round(pribl%1, 2) != 0.0:
                time = int(round(tm.time(), 0)-(round(pribl%1, 2)//speed*0.1))
            else:
                time = int(round(tm.time(), 0))
        else:
            if user != None:
                us[user][2] = int(us[user][2])+int(coins_am)
                db.wrTo(us, "users.txt")
                coins_am = 0

        new_mg.append([item[0], item[1], str(speed), str(time), str(last)])
        am[0][0] = str(coins_am)
        am[0][1] = str(cl_am)
        am[0][2] = str(video_am)

        #print(pribl, last, time, round(pribl%1, 2))
    db.wrTo(am, 'coins_amount.txt')
    db.wrTo(new_mg, 'mining.txt')

def mining_pereod():
    mining_update()
    print("–º–∞–π–Ω–∏–Ω–≥")

def start_mining():
    N = 3600
    threading.Timer(N, start_mining).start()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    mining_pereod()


def your_periodic_function():
    center_bank()
    print("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥")

def start_timer():
    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (N) –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
    N = 900
    threading.Timer(N, start_timer).start()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    your_periodic_function()

def active_plus(message, act=1):
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    if user != None:
        us[user][4] = int(us[user][4])+act
    db.wrTo(us, "users.txt")


start_timer()
start_mining()



# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç

@bot.message_handler(commands=['start'])
def main(message):
    #center_bank()
    try:
        global ban
        global center_bank_leaves
        global center_bank_coins
        us = db.getMas("users.txt")
        user = db.find_string(us, "@"+str(message.from_user.username))
        user_id = db.find_in("users.txt", str(message.chat.id), 3)
        usn = "@"+str(message.from_user.username)

        ref = db.getMas("referals.txt")
        referral_code = message.text.partition(' ')[2]
        
        new_user_coins = 10
        new_user_leaves = 50000
        

    

        if message.from_user.username == None:
            bot.send_message(message.chat.id, "‚ùå–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        else:
            if user == None and user_id == None and not(usn in ban):
                
                if referral_code:
                    if db.find_string(ref, referral_code[1:]):
                        new_user_coins = 100
                        new_user_leaves = 80000
                        ref_user = db.find_string(us, "@"+ref[db.find_string(ref, referral_code[1:])][0].split("_usern_")[1])

                        if ref_user:
                            us[ref_user][1] = int(us[ref_user][1]) + 10000
                            us[ref_user][2] = int(us[ref_user][2]) + 50
                            center_bank_coins -= 50
                            center_bank_leaves -= 10000
                            bot.send_message(int(us[ref_user][3]), "üîî–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n‚úÖ–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 10000 –∫.–ª –∏ 50 CBC")
                            db.wrTo(us, "users.txt")

                        bot.send_message(message.chat.id, "üé´–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n–ë–æ–Ω—É—Å 30000 –∫.–ª 90 CBC")
                        del ref[db.find_string(ref, referral_code[1:])]
                        db.wrTo(ref, "referals.txt")
                    else:
                        bot.send_message(message.chat.id, "‚ùå–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                nu = [usn, new_user_leaves, new_user_coins, str(message.chat.id), 1, 0]  
                db.addMass(nu, "users.txt")
                
                bot.send_message(message.chat.id, "‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                bot.send_message(message.chat.id, f"ü§ñ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {usn}, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±–º–µ–Ω–∞ –ø—Å–µ–≤–¥–æ–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π <b>CobyaCoin (CBC)</b>\n–ù–∞ —Ç–≤–æ–π —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{new_user_leaves}</b> –∫–ª–µ–Ω–æ–≤—ã—Ö –ª–∏—Å—Ç—å–µ–≤ (–∫.–ª.) –∏ <b>{new_user_coins}</b> CBC", parse_mode="html")
                bot.send_message(message.chat.id, "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å:\nüí∞–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É - /buy\nüí∏–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É - /sell\n‚õè–°–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É –∏ –º–∞–π–Ω–∏—Ç—å CBC - /mining\nüí≥–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å - /balance\nüìà–ò–∑—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - /info\nüèÜ–ù–∞–π—Ç–∏ —Å–µ–±—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ - /liders\nüé∞–°—ã–≥—Ä–∞—Ç—å –≤ –∞–∑–∞—Ä—Ç–Ω—É—é –∏–≥—Ä—É - /casino\n–ò –µ—â–µ –º–Ω–æ–≥–æ –≤—Å—è–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–≥–æ... –ù–∞—á–∏–Ω–∞–π —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!")

            elif user == None and user_id != None and not(usn in ban):
                us[user_id][0] = "@"+str(message.from_user.username)
                db.wrTo(us, "users.txt")
                bot.send_message(message.chat.id, f"‚úÖ–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {usn}, —Å—á–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                bot.send_message(message.chat.id, f"<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b> –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—á–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å", parse_mode="html")
                
            elif user != None and user_id != None and not(usn in ban):
                bot.send_message(message.chat.id, f"‚úÖ–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {usn}, –≤–∞—à —Å—á–µ—Ç –≤ –ø–æ–ª–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
            elif usn in ban:
                bot.send_message(message.chat.id, f"‚ùå–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º, –¥–æ—Å—Ç—É–ø –≤ —Å–∏—Å—Ç–µ–º—É <b>–∑–∞–ø—Ä–µ—â–µ–Ω</b>", parse_mode="html")
            else:
                bot.send_message(message.chat.id, f"‚ùå–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–æ—Å—Ç—É–ø –≤ —Å–∏—Å—Ç–µ–º—É <b>–∑–∞–ø—Ä–µ—â–µ–Ω</b>", parse_mode="html")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")

# –ø—Ä–æ–¥–∞–∂–∞


@bot.message_handler(commands=['sell'])
def main(message: telebot.types.Message):
    center_bank()  
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∫–æ–∏–Ω–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)')
    bot.register_next_step_handler(message, coins)


def coins(message):
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    global course
    coin = message.text.strip()
    print(coin)
    try:
        if coin.isdigit():
            us = db.getMas("users.txt")
            user = db.find_string(us, "@"+str(message.from_user.username))
            if int(coin) > int(us[user][2]) or int(coin) <= 0:
                bot.send_message(message.chat.id, "‚ùå–ù–∞ —Ç–≤–æ—ë–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –Ω–∞–∂–º–∏ /sell –∏ –≤–≤–µ–¥–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É")
                bot.send_message(message.chat.id, f"–¢–≤–æ–π —Å—á—ë—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {us[user][1]} –∫–ª–µ–Ω–æ–≤—ã—Ö –ª–∏—Å—Ç—å–µ–≤, {us[user][2]} –ö–æ–±—è–∫–æ–∏–Ω–æ–≤")
            else:
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ —Ü–µ–Ω—É, —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {course}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ {course*int(coin)}")
                bot.register_next_step_handler(message, prise, args=coin)
        else:
            bot.send_message(message.chat.id, "‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–¥–∞–∂–∞ –¥–∞–Ω–Ω—ã–µ {e}")
        pass

def prise(message, args):
    usern = '@'+ str(message.from_user.username)
    coin = args
    global course
    price = message.text.strip()
    print(price)
    try:
        if price.isdigit() and int(price) < int(coin)*10*course:

            if int(price) > 0:
            #users  = db.getMas('users.txt')
                markup = telebot.types.InlineKeyboardMarkup()
                btn1 = telebot.types.InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç—Ä–µ–π–¥", callback_data='bs_sell '+str(coin)+' '+str(price)+' '+str(usern))
                btn2 = telebot.types.InlineKeyboardButton("–ü—Ä–æ–¥–∞—Ç—å –¥—Ä—É–≥—É", callback_data='us_sell '+str(coin)+' '+str(price)+' '+str(usern))
                btn3 = telebot.types.InlineKeyboardButton("  –û—Ç–º–µ–Ω–∞  ", callback_data='otmena '+str(coin)+' '+str(price)+' '+str(usern))
                markup.add(btn1, btn2)
                markup.row(btn3)
                bot.send_message(message.chat.id, "   –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏   ", reply_markup=markup)

        else:
            bot.send_message(message.chat.id, "‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–¥–∞–∂–∞ —Ü–µ–Ω–∞ {e}")
        pass

@bot.callback_query_handler(func=lambda call: True)
def callback_message(call):
    global course
    colvo = 0
    data = call.data.split()
    usern = data[3]
    coin = int(data[1])
    price = int(data[2])
    message = call.message
    if str(price).isdigit() and int(price) < course*10*int(coin):
        try:
            if data[0] == 'bs_sell':
                burse = db.getMas("burse.txt")
            
                for i in burse:
                    if i[0] == usern:
                        print("ass")
                        colvo += 1
                if colvo < 8:
                    db.addMass([usern, coin, price, int(round(tm.time()))], "burse.txt")
                    bot.send_message(message.chat.id, "‚úÖ–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –±–∏—Ä–∂–µ")
                    active_plus(message)
                else:
                    bot.send_message(message.chat.id, "üò°üò°üò°–•–≤–∞—Ç–∏—Ç —Ä—É—à–∏—Ç—å –±–æ—Ç–∞!")
            elif data[0] == 'us_sell':
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                us = db.getMas('users.txt')
                out = ''
                for i in range(1, len(us)):
                    out += str(i) + '.  ' + us[i][0] + '\n'
                bot.send_message(message.chat.id, out)
                
                bot.register_next_step_handler(message, choise, arg1=coin, arg2=price, arg3=usern)
            elif data[0] == 'otmena':
                print('otmena')
                bot.send_message(message.chat.id, "‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–¥–∞–∂–∞ —Å–ø–æ—Å–æ–± {e}")
            pass
    else:
        bot.send_message(message.chat.id, "‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
def choise(message, arg1, arg2, arg3):
    try:
        coin = arg1
        price = arg2
        usern = arg3
        ch = message.text.strip()
        us = db.getMas('users.txt')
        tread = [us[int(ch)][0], usern, str(coin), str(price)]
        db.addMass(tread, 'us_b.txt')
        bot.send_message(message.chat.id, "‚úÖ–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è —É –¥—Ä—É–≥–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞—Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É")
        bot.send_message(us[int(ch)][3], f"üîî–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}", disable_notification=True)
        active_plus(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–±–æ—Ä –¥—Ä—É–≥–∞ {e}")
        pass 
    




# –ø–æ–∫—É–ø–∫–∞


@bot.message_handler(commands=['buy'])
def burse_main(message, page=0, messageid=0, messagetxt=''):
    try:
        center_bank()
        usb = db.getMas('us_b.txt')
        burse = db.getMas("burse.txt")
        out = ''
        markup_burse = telebot.types.ReplyKeyboardMarkup()
        markup_burse.add(telebot.types.KeyboardButton("–í–ø–µ—Ä—ë–¥"))
        markup_burse.add(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥"))
        if messageid == 0:
            if len(burse) != 1:
                out = update_page(page)
                message_s = bot.send_message(message.chat.id, out)
                messageid=message_s.message_id
                messagetxt = message_s.text+'\n'+'\n'
                
            else:
                bot.send_message(message.chat.id, "–ë–∏—Ä–∂–∞ –ø—É—Å—Ç–∞(")
            buyer = db.find_string(usb,'@'+str(message.from_user.username))
            if buyer != None:
                bot.send_message(message.chat.id, f"{usb[buyer][1]} —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º {usb[buyer][2]} –∫–æ–∏–Ω –∑–∞ {usb[buyer][3]} –∫.–ª.")
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)]")
            bot.send_message(message.chat.id, "–î–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–π–¥–∞ —Å –±–∏—Ä–∂–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —á–∞—Ç, –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞ (–≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –Ω–∞–ø–∏—à–∏—Ç–µ -1", reply_markup=markup_burse)
        else:
            out = update_page(page)

            if out != messagetxt:
                
                bot.edit_message_text(chat_id=message.chat.id, text=out, message_id=messageid)
            else:
                pass
            

        bot.register_next_step_handler(message, chos, page=page, messageid=messageid, messagetxt=messagetxt)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü–æ–∫—É–ø–∫–∞ –≤—ã–≤–æ–¥ –±–∏—Ä–∂–∏ {e}")
        pass

def chos(message, messageid, messagetxt, page=0):
    global timer
    global transactions
    global course
    global history
    global torg
    ch = message.text.strip()
    global center_bank_leaves

    if ch.isdigit() or ch == '-1':
        if torg:
            try:
                burse = db.getMas("burse.txt")

                # –µ—Å–ª–∏ —è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
                us = db.getMas("users.txt")
                user = db.find_string(us, "@"+str(message.from_user.username))
                usb = db.getMas('us_b.txt')
                buyer = db.find_string(us,'@'+str(message.from_user.username))
                ce = db.getMas("center")

                

                if ch != '-1':
                    ch = str(int(ch)-1)
                    
                    if '@'+str(message.from_user.username) != burse[int(ch)][0]:

                        seller = db.find_string(us, burse[int(ch)][0])
                        if seller != None:
                            if int(us[user][1]) < int(burse[int(ch)][2]) or user == None:
                                bot.send_message(message.chat.id, "‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                            else:
                                
                                coin = int(us[user][2])+int(burse[int(ch)][1])
                                leave = int(us[user][1])-int(burse[int(ch)][2])
                                
                                sel_coin = int(us[seller][2])-int(burse[int(ch)][1])
                                sel_leave = int(us[seller][1])+int(int(burse[int(ch)][2])*0.9)
                                center_bank_leaves += int(int(burse[int(ch)][2])*0.1)
                                
                                us[user][1] = str(leave)
                                us[user][2] = str(coin)
                                us[seller][1] = str(sel_leave)
                                us[seller][2] = str(sel_coin)
                                
                                ce[0][0] = str(center_bank_leaves)
                                ce[1][0] = str(center_bank_coins)

                                db.wrTo(ce,"center")

                                transactions += 1
                                history.append(int(burse[int(ch)][2])//int(burse[int(ch)][1]))
                                db.addMass([str(int(burse[int(ch)][2])//int(burse[int(ch)][1]))], "history.txt")

                                c = sum_of_last_10_elements(history)
                                course = c//10
                                
                                if course <= 0:
                                    course = 1

                                #infodb.getMas('course')
                                #cr[0][0] = str(course)
                                timer += 1
                                cr = [str(course), str(transactions), str(videocards_course), str(jackpot)]
                                db.addMass(cr, 'course')
                                
                                bot.send_message(us[seller][3], f"üîî–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ! –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {us[buyer][0]}", disable_notification=True)
                                
                                db.wrTo(us, 'users.txt')
                                del burse[int(ch)]
                                db.wrTo(burse, 'burse.txt')

                                bot.send_message(message.chat.id, "‚úÖ–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                active_plus(message)
                        else:
                            bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

                elif ch == '-1':
                        seller = db.find_string(us, usb[buyer][1])
                        if seller != None:
                            if int(us[user][1]) < int(usb[buyer][3]):
                                bot.send_message(message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                            else:
                                coin = int(us[user][2])+int(usb[buyer][2])
                                leave = int(us[user][1])-int(usb[buyer][3])

                                #print("a1")

                                sel_coin = int(us[seller][2])-int(usb[buyer][2])
                                sel_leave = int(us[seller][1])+int(int(usb[buyer][3])*0.9)
                                center_bank_leaves += int(int(usb[buyer][3])*0.1)

                                #print("a2")
                                ce[0][0] = str(center_bank_leaves)
                                ce[1][0] = str(center_bank_coins)

                                db.wrTo(ce,"center")

                                us[user][1] = str(leave)
                                us[user][2] = str(coin)
                                us[seller][1] = str(sel_leave)
                                us[seller][2] = str(sel_coin)

                                #print('a3')

                                transactions += 1
                                history.append(int(usb[buyer][3])//int(usb[buyer][2]))
                                db.addMass([str(int(usb[buyer][3])//int(usb[buyer][2]))], "history.txt")

                                

                                c = sum_of_last_10_elements(history)
                                course = c//5
                                
                                if course <= 0:
                                    course = 1
                                #cr = db.getMas('course')
                                #cr[0][0] = str(course)
                                #db.wrTo(cr, 'course')
                                timer += 1
                                cr = [str(course), str(transactions), str(videocards_course), str(jackpot)]
                                db.addMass(cr, 'course')

                                bot.send_message(us[seller][3], "üîî–í–∞—à–µ –ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ!", disable_notification=True)

                                db.wrTo(us, 'users.txt')
                                del usb[buyer]
                                db.wrTo(usb, 'us_b.txt')

                            bot.send_message(message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            active_plus(message)
                        else:
                            bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                print(f"–ü–æ–∫—É–ø–∫–∞ {e}")
                pass
        else:
            bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É, —Ç–∞–∫ –∫–∞–∫ –∫—É—Ä—Å –ø—Ä–µ–≤—ã—Å–∏–ª –ø–ª–∞–Ω–∫—É")
    elif ch == "–í–ø–µ—Ä—ë–¥":
        bot.delete_message(message.chat.id, message.id)
        page+=1
        burse_main(message, page, messageid=messageid, messagetxt=messagetxt)
    elif ch =="–ù–∞–∑–∞–¥":
        bot.delete_message(message.chat.id, message.id)
        if page != 0:
            page-=1
            burse_main(message, page, messageid=messageid, messagetxt=messagetxt)
        else:
            #bot.send_message(message.chat.id, "–î–∞–ª—å—à–µ –Ω–µ–∫—É–¥–∞") 
            
            bot.register_next_step_handler(message, chos, page=page, messageid=messageid, messagetxt=messagetxt)

    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /buy –µ—â–µ —Ä–∞–∑")







@bot.message_handler(commands=['balance'])
def main(message):
    center_bank()
    global course
    global transactions
    global center_bank_coins
    global center_bank_leaves
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    
    try:
        if user != None:
            if int(us[user][2]) < 0:
                us[user][1] = str(int(us[user][1]) - abs(int(us[user][2]))*course)
                us[user][2] = '0'
                db.wrTo(us, 'users.txt')
           
            
            bot.send_message(message.chat.id, f"-----  <b>–í–∞—à —Å—á–µ—Ç</b> -----\n\n<b>üçÅ{us[user][1]}</b> <i>–∫.–ª</i>\n\n<b>üí∞{us[user][2]}</b> <i>CBC</i>", parse_mode="html")
            tm.sleep(0.1)
            bot.send_message(message.chat.id,f"–ö—É—Ä—Å CBC —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {number_to_emoji(course)}")
            active_plus(message)
        else:
            bot.send_message(message.chat.id, "–ü–æ–≥–æ–¥–∏, —è —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –≤–∏–¥–µ–ª, –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é --> /start")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ë–∞–ª–∞–Ω—Å {e}")


@bot.message_handler(commands=['trans'])
def main(message):
    bot.send_message(message.chat.id, "üë•–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    us = db.getMas('users.txt')
    out = ''
    for i in range(1, len(us)):
        out += str(i) + '.  ' + us[i][0] + '\n'
    bot.send_message(message.chat.id, out)
            
    bot.register_next_step_handler(message, par)

def par(message):
    global pr
    pr = message.text.strip()
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    print(user)
    if pr.isdigit() and pr!=str(user):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞")
        bot.register_next_step_handler(message, val)
    else:
        bot.send_message(message.chat.id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /trans –µ—â–µ —Ä–∞–∑")

def val(message):
    global sc
    sc = message.text.strip()
    #print(int(sc), int(pr))
    if sc.isdigit():
        markup1 = telebot.types.ReplyKeyboardMarkup()
        bt1 = telebot.types.KeyboardButton("üçÅ–ö–ª–µ–Ω–æ–≤—ã–µ –ª–∏—Å—Ç—å—è")
        bt2 = telebot.types.KeyboardButton("üí∞–ö–æ–±—è–∫–æ–∏–Ω—ã")
        markup1.row(bt1)
        markup1.row(bt2)
        bot.send_message(message.chat.id, "   –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–ª–µ–≤–µ—Ä–æ–º)   ", reply_markup=markup1)
        bot.register_next_step_handler(message, on_click)
    else:
        bot.send_message(message.chat.id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /trans –µ—â–µ —Ä–∞–∑")

def on_click(message):
    global pr
    global sc
    us_l = 0
    us_c = 0
    pr_l = 0
    pr_c = 0
    if message.text == "üçÅ–ö–ª–µ–Ω–æ–≤—ã–µ –ª–∏—Å—Ç—å—è":
        try:
            us = db.getMas("users.txt")
            user = db.find_string(us, "@"+str(message.from_user.username))
            pr_l = int(us[int(pr)][1]) + int(sc)
            us_l = int(us[user][1]) - int(sc)

            if int(sc) <= int(us[user][1]):
                us[int(pr)][1] = str(pr_l)
                us[user][1] = str(us_l)
                
                bot.send_message(message.chat.id, '–ü–µ—Ä–µ–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ')
                bot.send_message(us[int(pr)][3], '–í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å—É–º–º—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å')
                active_plus(message)
            else:
                bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞')

            db.wrTo(us, 'users.txt')
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü–µ—Ä–µ–≤–æ–¥ –∫–ª {e}")
            pass
    elif message.text == "üí∞–ö–æ–±—è–∫–æ–∏–Ω—ã":
        try:
            us = db.getMas("users.txt")
            user = db.find_string(us, "@"+str(message.from_user.username))
            pr_c = int(us[int(pr)][2]) + int(sc)
            us_c = int(us[user][2]) - int(sc)
            
            if int(sc) <= int(us[user][2]):
                us[int(pr)][2] = str(pr_c)
                us[user][2] = str(us_c)

                bot.send_message(message.chat.id, '‚úÖ–ü–µ—Ä–µ–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ')
                bot.send_message(us[int(pr)][3], 'üîî–í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å—É–º–º—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å')
                active_plus(message)
            else:
                bot.send_message(message.chat.id, '‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞')
            
            db.wrTo(us, 'users.txt')
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–∏–Ω—ã {e}")
            pass


@bot.message_handler(commands=['mining'])
def min(message):
    mg = db.getMas("mining.txt")
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    mining_user = db.find_string(mg, "@"+str(message.from_user.username))

    min_markup = telebot.types.ReplyKeyboardMarkup()
    btm1 = telebot.types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É ‚õè")
    btm2 = telebot.types.KeyboardButton("–£–ª—É—á—à–∏—Ç—å —Ñ–µ—Ä–º—É üõ†")
    btm3 = telebot.types.KeyboardButton("–ö—É–ø–∏—Ç—å \n–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—Éüõç")
    btm4 = telebot.types.KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å \n–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—Éüí∞")
    btm5 = telebot.types.KeyboardButton("‚ùå–í—ã–π—Ç–∏")

    

    if user == None:
        bot.send_message(message.chat.id, "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CobyaCoin\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é")
    elif mining_user == None:
        min_markup.row(btm1)
        min_markup.row(btm5)
        bot.send_message(message.chat.id, "‚ùó–£ —Ç–µ–±—è –Ω–µ—Ç —Ñ–µ—Ä–º—ã, –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ–µ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø—É –Ω–∏–∂–µ", reply_markup=min_markup)
        bot.register_next_step_handler(message, min_buttns)
    else:
        min_markup.row(btm3, btm4)
        min_markup.row(btm2)
        min_markup.row(btm5)
        bot.send_message(message.chat.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=min_markup)
        
        #–Ω–∞—á–∏–Ω–∞–µ–º –µ**—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü—ã --> 0:–ò–º—è —é–∑–µ—Ä–∞ 1:–£—Ä–æ–≤–µ–Ω—å(—ë–º–∫–æ—Å—Ç—å —Ñ–µ—Ä–º—ã) 2:–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏ 3: time 4: –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        min_data = mg[mining_user]
        level = int(min_data[1])
        speed = int(min_data[2])
        time = int(min_data[3])
        last = int(min_data[4])

        bot.send_message(message.chat.id, f"üí∞–° –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Ñ–µ—Ä–º–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –≤–∞–º {last} CBC\n{(last)*course} –∫.–ª.")
        bot.send_message(message.chat.id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —Ñ–µ—Ä–º—ã {level*1000}\n–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã {videocards_course}")
        bot.register_next_step_handler(message, min_buttns)
        
def min_buttns(message):
    try:
        global center_bank_leaves
        global videocards_course
        global video_am
        global course
        text = message.text.strip()
        mg = db.getMas("mining.txt")
        mining_user = db.find_string(mg, "@"+str(message.from_user.username))
        us = db.getMas("users.txt")
        user = db.find_string(us, "@"+str(message.from_user.username))
        if mining_user != None:
            min_data = mg[mining_user]
            level = int(min_data[1])
            speed = int(min_data[2])
            time = int(min_data[3])
            last = int(min_data[4])

        match text:
            case "–°–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É ‚õè":
                if user != None:
                    if mining_user == None:
                        if int(us[user][1]) >= 10000:
                            us[user][1] = str(int(us[user][1])-10000)
                            center_bank_leaves += 10000
                            mg.append(["@"+str(message.from_user.username), 1, 1, str(int(round(tm.time(), 0))), 0])
                            bot.send_message(message.chat.id, "‚úÖ–§–µ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                            db.wrTo(mg, "mining.txt")
                            db.wrTo(us, "users.txt")
                            active_plus(message)
                            bot.register_next_step_handler(message, min_buttns) 
                        else:
                            bot.send_message(message.chat.id, "‚ùå–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                    else:
                        bot.send_message(message.chat.id, "‚ùå–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞, –≤—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è")
                else:
                    bot.send_message(message.chat.id, "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CobyaCoin\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é")

            case "–£–ª—É—á—à–∏—Ç—å —Ñ–µ—Ä–º—É üõ†":
                if user != None:
                    if int(us[user][1]) >= level*1000:
                        us[user][1] = str(int(us[user][1])-level*1000)
                        center_bank_leaves += level*1000
                        level+=1
                        min_data[1] = str(level)
                        mg[mining_user] = min_data
                        db.wrTo(mg, "mining.txt")
                        db.wrTo(us, "users.txt")
                        bot.send_message(message.chat.id, f"‚úÖ–§–µ—Ä–º–∞ —É–ª—É—á—à–µ–Ω–∞, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã {level}")
                        active_plus(message)
                        bot.register_next_step_handler(message, min_buttns) 
                    else:
                        bot.send_message(message.chat.id, "‚ùå–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                else:
                    bot.send_message(message.chat.id, "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CobyaCoin\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é")

            case "–ö—É–ø–∏—Ç—å \n–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—Éüõç":
                if user != None:
                    if speed+1 <= level*10:
                        if int(us[user][1]) >= videocards_course:
                            if video_am-1 >= 0:
                                us[user][1] = str(int(us[user][1])-videocards_course)
                                center_bank_leaves += videocards_course
                                speed += 1
                                video_am -= 1
                                min_data[2] = str(speed)
                                mg[mining_user] = min_data
                                db.wrTo(mg, "mining.txt")
                                db.wrTo(us, "users.txt")
                                videocards_course = r.randint(1, course*10)
                                cr = [str(course), str(transactions), str(videocards_course), str(jackpot)]
                                db.addMass(cr, 'course')
                                bot.send_message(message.chat.id, f"‚úÖ–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –∫—É–ø–ª–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –Ω–∞ —Ñ–µ—Ä–º–µ: {speed}")
                                active_plus(message)
                                bot.register_next_step_handler(message, min_buttns) 
                            else:
                                bot.send_message(message.chat.id, f"‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç")
                        else:
                            bot.send_message(message.chat.id, f"‚ùå–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                    else:
                        bot.send_message(message.chat.id, f"‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç, —É–ª—É—á—à–∏—Ç–µ —Ñ–µ—Ä–º—É")
                else:
                    bot.send_message(message.chat.id, "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CobyaCoin\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é") 

            case "–ü—Ä–æ–¥–∞—Ç—å \n–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—Éüí∞":
                if user != None:
                    if speed > 1:
                        us[user][1] = str(int(us[user][1])+videocards_course)
                        speed -= 1
                        video_am += 1
                        center_bank_leaves -= videocards_course
                        min_data[2] = str(speed)
                        mg[mining_user] = min_data
                        db.wrTo(mg, "mining.txt")
                        db.wrTo(us, "users.txt")
                        bot.send_message(message.chat.id, f"‚úÖ–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –Ω–∞ —Ñ–µ—Ä–º–µ: {speed}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {videocards_course}")
                        videocards_course = r.randint(1, course*10)
                        cr = [str(course), str(transactions), str(videocards_course), str(jackpot)]
                        db.addMass(cr, 'course')
                        active_plus(message)
                        bot.register_next_step_handler(message, min_buttns) 
                    else:
                        bot.send_message(message.chat.id, f"‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É")
                    
                else:
                    bot.send_message(message.chat.id, "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CobyaCoin\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é") 
            case "‚ùå–í—ã–π—Ç–∏":
                bot.send_message(message.chat.id, "‚ùó–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã") 
           
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        pass

@bot.message_handler(commands=['del'])
def delet(message):
    burse = db.getMas("burse.txt")
    out = ''
    try:
        for i in range(1, len(burse)):
            out += str(i) + '. ' + burse[i][0] + ' –ø—Ä–æ–¥–∞—ë—Ç ' + burse[i][1] + ' –∫–æ–∏–Ω–æ–≤ –∑–∞ ' + burse[i][2] + ' –∫.–ª.' + '\n'
        bot.send_message(message.chat.id, out)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç—Ä–µ–π–¥–∞")
        bot.register_next_step_handler(message, del_c)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –≤—ã–≤–æ–¥ {e}")
        pass
def del_c(message):
    c = message.text.strip()
    burse = db.getMas("burse.txt")
    try:
        if c.isdigit():
            if burse[int(c)][0] == '@'+str(message.from_user.username):
                del burse[int(c)]
                db.wrTo(burse, 'burse.txt')
                bot.send_message(message.chat.id, "–¢—Ä–µ–π–¥ —É–¥–∞–ª—ë–Ω")
            else:
                bot.send_message(message.chat.id, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π —Ç—Ä–µ–π–¥")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {e}")
        pass
    

@bot.message_handler(commands=['give'])
def secr(message):
    bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è...")
    try:
        t = ['@societykolyan' , 200000]
        us = db.getMas('users.txt')
        pers = db.find_string(us, t[0])
        us[pers][1] = int(us[pers][1]) + int(t[1])
        db.wrTo(us, "users.txt")
        bot.send_message(message.chat.id, "–±—Ä–∞—Ç–∏—à–∫–∞ , —Ç—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª 200000 –ª–∏—Å—Ç—å–µ–≤ –∞–¥–º–∏–Ω—É –Ω–∞ —á–∞–π –∏ –ø–æ–ª—É—á–∏–ª +1000000 –∫ –∫–∞—Ä–º–µ")
        bot.send_message(809500318 , '–±—Ä–æ , —Ç–µ–±–µ –ø—Ä–∏—à–ª–æ 200–∫ –æ—Ç –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–æ–≤')
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–î–æ–Ω–∞—Ç 1 {e}")
        pass
    try:
        t = [f'{"@"+str(message.from_user.username)}' ,-200000]
        us = db.getMas('users.txt')
        pers = db.find_string(us, t[0])
        us[pers][1] = int(us[pers][1]) + int(t[1])
        db.wrTo(us, "users.txt")
        bot.send_message(message.chat.id, "—Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–î–æ–Ω–∞—Ç 2 {e}")
        pass

@bot.message_handler(commands=['secret'])
def sec(message):
    bot.send_message(message.chat.id , '–±–æ—Ç–∏–∫ , —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')
    for i in range(1):
        bot.send_message(message.chat.id , 'üé∞')

@bot.message_handler(commands=['info'])
def info(message):
    global course
    global transactions
    global center_bank_leaves
    global center_bank_coins
    global x
    global y
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    usb = db.getMas('us_b.txt')
    burse = db.getMas("burse.txt")
    x = []
    y = []
    out = ''
    score = 0
    try:
        for i, item in enumerate(burse, start=1):
            
            out += str(i) + '. ' + item[0] + ' (<i>' + str(round((tm.time()-int(item[3]))/3600)) + '—á' +'</i>) <b>–ø—Ä–æ–¥–∞—ë—Ç ' + item[1] + ' CBC</b> –∑–∞ <b>' + item[2] + ' –∫.–ª.</b>'+ '\n' + '\n'
            score += 1
            if i == len(burse) or score == 5:
                score = 0
                bot.send_message(message.chat.id, out, parse_mode="html")
                out = ''

        buyer = db.find_string(usb,'@'+str(message.from_user.username))
        if buyer != None:
            bot.send_message(message.chat.id, f"{usb[buyer][1]} —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º {usb[buyer][2]} –∫–æ–∏–Ω –∑–∞ {usb[buyer][3]} –∫.–ª.")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)]")
        

        x_str = db.getCols('course')[1]
        
        for i in x_str:
            x.append(int(i))

        y_str = db.getCols('course')[0]
        
        for i in y_str:
            y.append(int(i))
        print(x, y)

        procent = round(((y[-1]-y[-2])/y[-2])*100, 2)
        if procent > 0:
            bot.send_message(message.chat.id, f"\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –ö–æ–±—è–∫–æ–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç\n<b>{number_to_emoji(course)} –∫.–ª.</b>        üîº <b>{procent}%</b>", parse_mode="html")
        else:
            bot.send_message(message.chat.id, f"\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –ö–æ–±—è–∫–æ–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç\n<b>{number_to_emoji(course)} –∫.–ª.</b>        üîΩ <b>{procent}%</b>", parse_mode="html")
        bot.send_message(message.chat.id, f"üí∏–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{transactions+2590}</b>", parse_mode="html")
        #bot.send_message(message.chat.id, f"–°–∏—Å—Ç–µ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{transactions}</b>", parse_mode="html")
        bot.send_message(message.chat.id, f"üí∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ–±—ã—Ç—ã—Ö –∫–æ–∏–Ω–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{coins_am}</b>", parse_mode="html")
        bot.send_message(message.chat.id, f"‚õè–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã <b>{videocards_course}</b>\nüì¶–í–∏–¥–µ–æ–∫–∞—Ä—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>{video_am}</b>", parse_mode="html")
        bot.send_message(message.chat.id, f"üèõ<b>–¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫</b>\n\nüçÅ–∫.–ª. <b>{center_bank_leaves}</b>\nüí∞CBC <b>{center_bank_coins}</b>", parse_mode="html")
        
        active_plus(message)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ò–Ω—Ñ–æ –æ—Å–Ω–æ–≤–∞ {e}")
        print(e)
        pass
    try:
        plt.clf()
        plt.plot(x, y)
        plt.savefig("coursie.png")
        with open ('./coursie.png', 'rb') as ph:
            bot.send_photo(message.chat.id, ph)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ò–Ω—Ñ–æ –≥—Ä–∞—Ñ–∏–∫–∏ {e}")
        pass
    #plt.show()
    
    
@bot.message_handler(commands=['admin'])
def adm(message):
    global admins
    global promocodeL
    global promocodeC
    if '@'+str(message.from_user.username) in admins:
        markup5 = telebot.types.ReplyKeyboardMarkup()
        bt1 = telebot.types.KeyboardButton("üîí–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bt2 = telebot.types.KeyboardButton("üçÅ–í—ã–¥–∞—Ç—å –ª–∏—Å—Ç—å—è")
        bt3 = telebot.types.KeyboardButton("üí∞–í—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã")
        bt4 = telebot.types.KeyboardButton("üì¢–û–±—ä—è–≤–ª–µ–Ω–∏–µ")
        bt5 = telebot.types.KeyboardButton("üîì–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bt6 = telebot.types.KeyboardButton("üíº–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")
        bt7 = telebot.types.KeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–π–¥")
        bt8 = telebot.types.KeyboardButton("üõ†–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞")
        bt9 = telebot.types.KeyboardButton("üí¨–ê–¥–º–∏–Ω—Å–∫–∞—è –≥—Ä—É–ø–ø–∞")
        markup5.add(bt1, bt5)
        markup5.add(bt2, bt3)
        markup5.row(bt4)
        markup5.row(bt8)
        markup5.row(bt7)
        markup5.row(bt6)
        markup5.row(bt9)
        
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∞–¥–º–∏–Ω–∞", reply_markup=markup5)
        bot.send_message(message.chat.id, f"–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –ª–∏—Å—Ç—å—è {promocodeL}, –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –∫–æ–∏–Ω—ã {promocodeC}")
        bot.register_next_step_handler(message, admin)
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω")


def admin(message):
    text = message.text.strip()
    match text:
        case "üîí–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(message, adm_ban)

        case "üîì–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(message, adm_anti_ban)
        
        case "üçÅ–í—ã–¥–∞—Ç—å –ª–∏—Å—Ç—å—è":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É\n‚úè<i>@ivan 1000</i>", parse_mode="html")
            bot.register_next_step_handler(message, adm_mpl)

        case "üí∞–í—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É\n‚úè<i>@ivan 1000</i>", parse_mode="html")
            bot.register_next_step_handler(message, adm_cbc)

        case "üì¢–û–±—ä—è–≤–ª–µ–Ω–∏–µ":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")
            bot.register_next_step_handler(message, adm_alert)

        case "üõ†–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞":
            try:
                with open ('users.txt', 'rb') as ph:
                    bot.send_document(message.chat.id, ph) 
            except:
                pass
            try:
                with open ('mining.txt') as mn:
                    bot.send_document(message.chat.id, mn) 
            except:
                pass
            try:
                with open ('history.txt') as hn:
                    bot.send_document(message.chat.id, hn) 
            except:
                pass
            try:
                with open ('auction.txt') as an:
                    bot.send_document(message.chat.id, an) 
            except:
                pass
            try:
                with open ('burse.txt') as bn:
                    bot.send_document(message.chat.id, bn) 
            except:
                pass

        case "‚ùå–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–π–¥":
            burse = db.getMas("burse.txt")
            out = ''
            score = 0
            for i, item in enumerate(burse, start=1):
            
                out += str(i) + '. ' + item[0] + ' (<i>' + str(round((tm.time()-int(item[3]))/3600)) + '—á' +'</i>) <b>–ø—Ä–æ–¥–∞—ë—Ç ' + item[1] + ' CBC</b> –∑–∞ <b>' + item[2] + ' –∫.–ª.</b>'+ '\n' + '\n'
                score += 1
                if i == len(burse) or score == 5:
                    score = 0
                    bot.send_message(message.chat.id, out, parse_mode="html")
                    out = ''

        case "üíº–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(message, adm_adm_plus)

        case "üí¨–ê–¥–º–∏–Ω—Å–∫–∞—è –≥—Ä—É–ø–ø–∞":
            bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É ==> https://t.me/+XqnYBzMciRg1Y2Iy")

def adm_ban(message):
    try:
        global ban
        us = db.getMas("users.txt")
        u = message.text.strip()
        ban.append(u)
        del us[db.find_string(us, u)]
        db.wrTo(us, "users.txt")
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω")
        print(ban)
    except:
        pass

def adm_anti_ban(message):
    global ban
    u = message.text.strip()
    del ban[ban.index(u)]
    bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω")
    print(ban)

def adm_adm_plus(message):
    u = message.text.strip()
    global admins
    admins.append(u)

def adm_alert(message):
    try:
        text = "üîä"+message.text.strip()
        us = db.getMas("users.txt")
        for i in range(0,len(us)):
            bot.send_message(us[i][3], text)
    except:
        pass

def adm_cbc(message):
    global center_bank_coins
    try:
        text = message.text.strip()
        t = text.split(" ")
        us = db.getMas('users.txt')
        pers = db.find_string(us, t[0])
        us[pers][2] = int(us[pers][2]) + int(t[1])
        center_bank_coins -= int(t[1])
        db.wrTo(us, "users.txt")
        bot.send_message(message.chat.id, "–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        pass

def adm_mpl(message):
    global center_bank_leaves
    try:
        text = message.text.strip()
        t = text.split(" ")
        us = db.getMas('users.txt')
        pers = db.find_string(us, t[0])
        us[pers][1] = int(us[pers][1]) + int(t[1])
        center_bank_leaves -= int(t[1])
        db.wrTo(us, "users.txt")
        bot.send_message(message.chat.id, "–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        pass

#@bot.message_handler(commands=)
@bot.message_handler(commands=promocodeL)
def prml(message):
    try:
        global promocodeL
        us = db.getMas("users.txt")
        user = db.find_string(us, "@"+str(message.from_user.username))
        us[user][1] = str(int(us[user][1])+10000)
        db.wrTo(us, "users.txt")
        promocodeL.remove(message.text.strip()[1:])
        bot.send_message(message.chat.id, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10000 –∫.–ª.")
        s = ''
        for i in range(4):
            s += r.choice(list("qwertyuiop[]asdfghjkl;'zxcvbnm,.1234567890QWERTYUIOPASDFGHJKL:ZXCVBNM<>?@%$&*()_-+="))
        promocodeL.append(s)
        s = ''
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–º–æ–∫–æ–¥—ã –ª–∏—Å—Ç—å—è {e}")

@bot.message_handler(commands=promocodeC)
def prmc(message):
    try:
        global promocodeC
        us = db.getMas("users.txt")
        user = db.find_string(us, "@"+str(message.from_user.username))
        us[user][2] = str(int(us[user][2])+50)
        db.wrTo(us, "users.txt")
        promocodeC.remove(message.text.strip()[1:])
        bot.send_message(message.chat.id, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 –∫–æ–∏–Ω–æ–≤")
        s = ''
        for i in range(4):
            s += r.choice(list("qwertyuiop[]asdfghjkl;'zxcvbnm,.1234567890QWERTYUIOPASDFGHJKL:ZXCVBNM<>?@%$&*()_-+="))
        promocodeL.append(s)
        s = ''
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–º–æ–∫–æ–¥—ã –∫–æ–∏–Ω—ã {e}")

@bot.message_handler(commands=['nft_sell'])
def handle_start(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ NFT")
    bot.register_next_step_handler(message, nft_name)

def handle_file(message, nft_n, nft_p):

    try:
        file_info = bot.get_file(message.document.file_id if message.document else message.photo[-1].file_id)
        file = bot.download_file(file_info.file_path)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_extension = message.document.file_name.split('.')[-1] if message.document else "jpg"
        file_name = f"{str(message.from_user.username)+str(message.message_id)}.{file_extension}"
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file_name)

        with open(file_path, 'wb') as new_file:
            new_file.write(file)

        bot.send_message(message.chat.id, f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {file_name}")
        db.addMass(["@"+str(message.from_user.username), nft_n, str(nft_p), file_name],"NFT")
        bot.send_message(message.chat.id, f"NFT —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ")
        active_plus(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ù–§–¢ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {e}")

def nft_name(message):
    
    cnsr = True
    text = message.text.strip()
    text1 = text
    for i in cf.substr:
        if i in text1.lower():
            cnsr = False
    if cnsr:
        nft_n = text
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É(–∫–æ–∏–Ω—ã)")
        bot.register_next_step_handler(message, nft_price, args=nft_n)
    else:
        bot.send_message(message.chat.id, "‚ùó–í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–∑—É—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, nft_name)

def nft_price(message, args):
    
    text = message.text.strip()
    if text.isdigit():
        if int(text) > 0 and int(text) < 50000:
            nft_p = int(text)
            bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å")
            bot.register_next_step_handler(message, handle_file, nft_n=args, nft_p = nft_p)
        else:
            bot.send_message(message.chat.id, "‚ùå–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Ç–∞–∫—É—é —Ü–µ–Ω—É, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            bot.register_next_step_handler(message, nft_price)
    else:
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

@bot.message_handler(commands=['nft_buy'])
def nft_buy(message):
    nft = db.getMas("NFT")
    ms = ""
    nom = 1
    if len(nft) != 0:
        for i in nft:
            ms += str(nom) + ". " + i[0] + " –ø—Ä–æ–¥–∞—ë—Ç NFT '" + i[1] + "' –∑–∞ " + i[2] + " –∫–æ–∏–Ω–æ–≤\n" 
            nom += 1
        bot.send_message(message.chat.id, ms)
        bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ NFT –≤–≤–µ–¥–∏ –µ–≥–æ –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, nft_view)
    else:
        bot.send_message(message.chat.id, "–ë–∏—Ä–∂–∞ –ø—É—Å—Ç–∞(")
    

def nft_view(message):
    try:
        c = message.text.strip()
        if c.isdigit():
            nft = db.getMas("NFT")
            if int(c) > 0 and int(c) <= len(nft):
                photo = Image.open(nft[int(c)-1][3]).convert("RGBA")
                photo = photo.resize((photo.width // 6, photo.height // 6))   
                watermark = Image.open("watermark.png").convert("RGBA")
                watermark = watermark.resize((photo.width, photo.height)) 
                photo.paste(watermark, (0, 0), watermark)
                photo.save("wt"+nft[int(c)-1][3], format="png")

                with open ("wt"+nft[int(c)-1][3], 'rb') as ph:
                        bot.send_photo(message.chat.id, ph)

                markup90 = telebot.types.ReplyKeyboardMarkup()
                butt1 = telebot.types.KeyboardButton("–ö—É–ø–∏—Ç—å NFT")
                butt2 = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
                markup90.row(butt1)
                markup90.row(butt2)
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup90)
                bot.register_next_step_handler(message, nft_buym, args=str(int(c)-1))
                
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ NFT –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑")
                bot.register_next_step_handler(message, nft_view)
                
        else:
            bot.send_message(message.chat.id, "‚ùå–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ù–§–¢ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–≤—å—é {e}")
        pass
    return c

def nft_buym(message, args):
    c = args
    global transactions
    global history
    global course
    global timer
    text = message.text.strip()
    nft = db.getMas("NFT")
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    seller = db.find_string(us, nft[int(c)][0])
    if text == "–ö—É–ø–∏—Ç—å NFT":
        try:
            if int(nft[int(c)][2]) <= int(us[user][2]):
                if nft[int(c)][0] != "@"+str(message.from_user.username):
                    sel_coin = int(us[seller][2]) + int(nft[int(c)][2])
                    us_coin = int(us[user][2]) - int(nft[int(c)][2])
                    us[seller][2] = sel_coin
                    us[user][2] = us_coin

                    with open (nft[int(c)][3], 'rb') as ph:
                        bot.send_document(message.chat.id, ph) 

                    os.remove(nft[int(c)][3])
                    os.remove("wt"+nft[int(c)][3])
                    
                    db.wrTo(us, "users.txt")
                    
                    bot.send_message(us[seller][3], "üîî–í–∞—à–∞ NFT –±—ã–ª–∞ –∫—É–ø–ª–µ–Ω–∞", disable_notification=True)
                    transactions += 1
                    history.append(course*int(nft[int(c)][2])*2)
                    course = sum_of_last_10_elements(history)//transactions
                    cr = [str(course), str(transactions), str(videocards_course), str(jackpot)]
                    db.addMass(cr, 'course')
                    db.addMass([course*int(nft[int(c)][2])], "history.txt")
                    del nft[int(c)]
                    db.wrTo(nft, "NFT")
                    bot.send_message(message.chat.id, "‚úÖNFT —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞")
                    active_plus(message)
                else:
                    bot.send_message(message.chat.id, "‚ùå–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ—é NFT")
            else:
                bot.send_message(message.chat.id, "‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ù–§–¢ –ø–æ–∫—É–ø–∫–∞ {e}")
            pass
    else:
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

@bot.message_handler(commands=['nft_del'])
def nft_del(message):
    nft = db.getMas("NFT")
    ms = ""
    nom = 1
    if len(nft) != 0:
        for i in nft:
            ms += str(nom) + ". " + i[0] + " –ø—Ä–æ–¥–∞—ë—Ç NFT '" + i[1] + "' –∑–∞ " + i[2] + " –∫–æ–∏–Ω–æ–≤\n" 
            nom += 1
        bot.send_message(message.chat.id, ms)
        bot.send_message(message.chat.id, "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è NFT –≤–≤–µ–¥–∏ –µ–≥–æ –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, nft_del_view)
    else:
        bot.send_message(message.chat.id, "–ë–∏—Ä–∂–∞ –ø—É—Å—Ç–∞(")
    
def nft_del_view(message):
    c = message.text.strip()
    if c.isdigit():
        c = str(int(c)-1)
        nft = db.getMas("NFT")
        us = db.getMas("users.txt")
        user = db.find_string(us, "@"+str(message.from_user.username))
        try:  
            if int(c) >= 0 and int(c) < len(nft):
                if nft[int(c)][0] == us[user][0]:

                    os.remove(nft[int(c)][3])
                    os.remove("wt"+nft[int(c)][3])
                    del nft[int(c)]
                    db.wrTo(us, "users.txt")
                    db.wrTo(nft, "NFT")
                    bot.send_message(message.chat.id, "NFT —É–¥–∞–ª–µ–Ω–∞")
                else:
                    bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–µ —Å–≤–æ—é NFT")
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–π NFT –Ω–µ—Ç(")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ù–§–¢ —É–¥–∞–ª–µ–Ω–∏–µ {e}")

@bot.message_handler(commands=['report'])
def report_main(message):
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É")
    bot.register_next_step_handler(message, report_text)

def report_text(message):
    text = message.text.strip()
    bot.send_message(6258402934, f"@{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É:\n{text}") 
    bot.send_message(809500318, f"@{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É:\n{text}")

@bot.message_handler(commands=['leg'])
def leg(message):
    markup80 = telebot.types.ReplyKeyboardMarkup()
    butt18 = telebot.types.KeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∏–ª–æ–≥–∏—è")
    butt19 = telebot.types.KeyboardButton("–õ–µ–≥–µ–Ω–¥—ã 6–í")
    butt20 = telebot.types.KeyboardButton("–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    markup80.row(butt18)
    markup80.add(butt19, butt20)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–∞–Ω–∏–µ\n–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∏–ª–æ–≥–∏—è --- 2000 –∫.–ª.\n–õ–µ–≥–µ–Ω–¥—ã 6–í --- 1000 –∫.–ª.\n–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è --- 500 –∫.–ª.", reply_markup=markup80)
    bot.register_next_step_handler(message, leg_click)

def leg_click(message):
    global center_bank_leaves
    text = message.text.strip()
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    if text == "–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∏–ª–æ–≥–∏—è":
        if int(us[user][1]) >= 2000:
            us[user][1] = int(us[user][1]) - 2000
            center_bank_leaves += 2000
            db.wrTo(us, "users.txt")
            with open ("Trilogy.docx", 'rb') as ph:
                bot.send_document(message.chat.id, ph)
            active_plus(message)
    elif text == "–õ–µ–≥–µ–Ω–¥—ã 6–í":
        bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∫–æ–º–∞–Ω–¥–∞ Cobya_coin_bot —Å–æ–±–∏—Ä–∞–µ—Ç –ª–µ–≥–µ–Ω–¥—ã –æ –ö–æ–±—è–∫–æ–≤–µ –í–µ–ª–∏–∫–æ–º –∏ —Å–∫–æ—Ä–æ –æ–Ω–∏ —Å–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è")
    elif text == "–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è":
        bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∫–æ–º–∞–Ω–¥–∞ Cobya_coin_bot —Å–æ–±–∏—Ä–∞–µ—Ç –ª–µ–≥–µ–Ω–¥—ã –æ –ö–æ–±—è–∫–æ–≤–µ –í–µ–ª–∏–∫–æ–º –∏ —Å–∫–æ—Ä–æ –æ–Ω–∏ —Å–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è")


@bot.message_handler(commands=['liders'])
def lid_main(message):
    sp.update()
    s_kl = ''
    s_cb = ''
    s_at = ''
    s_cs = ''
    for i in range(len(sp.liders_kl)):
        if (i+1 == 1):
            s_kl += str(i+1) + ". " + sp.liders_kl[i] + "ü•á" + "\n"
            s_cb += str(i+1) + ". " + sp.liders_cb[i] + "ü•á" + "\n"
            s_at += str(i+1) + ". " + sp.liders_act[i] + "ü•á" + "\n"
            s_cs += str(i+1) + ". " + sp.liders_cas[i] + "ü•á" + "\n"
        elif (i+1 == 2):
            s_kl += str(i+1) + ". " + sp.liders_kl[i] + "ü•à" + "\n"
            s_cb += str(i+1) + ". " + sp.liders_cb[i] + "ü•à" + "\n"
            s_at += str(i+1) + ". " + sp.liders_act[i] + "ü•à" + "\n"
            s_cs += str(i+1) + ". " + sp.liders_cas[i] + "ü•à" + "\n"
        elif (i+1 == 3):
            s_kl += str(i+1) + ". " + sp.liders_kl[i] + "ü•â" + "\n"
            s_cb += str(i+1) + ". " + sp.liders_cb[i] + "ü•â" + "\n"
            s_at += str(i+1) + ". " + sp.liders_act[i] + "ü•â" + "\n"
            s_cs += str(i+1) + ". " + sp.liders_cas[i] + "ü•â" + "\n"
        else:
            s_kl += str(i+1) + ". " + sp.liders_kl[i] + "\n"
            s_cb += str(i+1) + ". " + sp.liders_cb[i] + "\n"
            s_at += str(i+1) + ". " + sp.liders_act[i] + "\n"
            s_cs += str(i+1) + ". " + sp.liders_cas[i] + "\n"

    bot.send_message(message.chat.id, f"üçÅ–õ–∏–¥–µ—Ä—ã –ø–æ <b>–ª–∏—Å—Ç—å—è–º:</b>\n\n{s_kl}", parse_mode="html")
    bot.send_message(message.chat.id, f"üí∞–õ–∏–¥–µ—Ä—ã –ø–æ <b>–∫–æ–∏–Ω–∞–º:</b>\n\n{s_cb}", parse_mode="html")
    bot.send_message(message.chat.id, f"üìà–õ–∏–¥–µ—Ä—ã –ø–æ <b>–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n\n{s_at}", parse_mode="html")
    bot.send_message(message.chat.id, f"üé∞–õ–∏–¥–µ—Ä—ã –ø–æ <b>–∫–∞–∑–∏–Ω–æ:</b>\n\n{s_cs}", parse_mode="html")
   

@bot.message_handler(commands=["auc_sell"])
def auc_sell_main(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(message, auc_sell_dis)

def auc_sell_dis(message):
    disc = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É")
    bot.register_next_step_handler(message, auc_sell_price, disc=disc)

def auc_sell_price(message, disc):
    try:
        if message.text.strip().isdigit():
            start_price = int(message.text.strip())
            markup456 = telebot.types.ReplyKeyboardMarkup()
            butt41 = telebot.types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
            butt42 = telebot.types.KeyboardButton("–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ")
            markup456.add(butt41, butt42)
            bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞?", reply_markup=markup456)
            bot.register_next_step_handler(message, aic_sell_sogl, disc = disc, start_price = start_price)
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    
def aic_sell_sogl(message, disc, start_price):
    try:
        if message.text == "–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ":
            markup500 = telebot.types.ReplyKeyboardMarkup()
            butt51 = telebot.types.KeyboardButton("–°–æ–≥–ª–∞—à–∞—é—Å—å")
            butt52 = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
            markup500.row(butt51)
            markup500.row(butt52)
            bot.send_message(message.chat.id, "–†–∞–∑–º–µ—â–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã –Ω–µ—Å—ë—Ç–µ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞, –≤ —Å–ª—É—á–∞–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É, —Å –ø–æ—Å–ª–µ–¥—É—â–µ–º –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ–º –∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–µ–º –ø—Ä–∏–≥–æ–≤–æ—Ä–∞ (–±–∞–Ω –∏–ª–∏ –∫—Ä—É–ø–Ω—ã–π —à—Ç—Ä–∞—Ñ –≤ –æ–±–æ–∏—Ö –≤–∞–ª—é—Ç–∞—Ö)", reply_markup=markup500)
            bot.register_next_step_handler(message, aic_sell_fin, disc = disc, start_price = start_price, file_name = "#@#")
            #db.addMass(["@"+str(message.from_user.username), disc, start_price, "#@#", str(tm.time())], "auction.txt")
        elif message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ":
            bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–æ–≤–∞—Ä–æ–º")
            bot.register_next_step_handler(message, auc_sell_file, disc = disc, start_price = start_price)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def aic_sell_fin(message, disc, start_price, file_name):
    try:
        if message.text == "–°–æ–≥–ª–∞—à–∞—é—Å—å":
            db.addMass(["@"+str(message.from_user.username), disc, start_price, file_name, str(int(round(tm.time()))), "@"+str(message.from_user.username)], "auction.txt")
            bot.send_message(message.chat.id, "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è!")
            active_plus(message)
        else:
            bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞(")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
def auc_sell_file(message, disc, start_price):
    try:
        file_info = bot.get_file(message.document.file_id if message.document else message.photo[-1].file_id)
        file = bot.download_file(file_info.file_path)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_extension = message.document.file_name.split('.')[-1] if message.document else "jpg"
        file_name = f"{str(message.from_user.username)+str(message.message_id)}.{file_extension}"
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file_name)

        with open(file_path, 'wb') as new_file:
            new_file.write(file)
            
        bot.send_message(message.chat.id, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        markup500 = telebot.types.ReplyKeyboardMarkup()
        butt51 = telebot.types.KeyboardButton("–°–æ–≥–ª–∞—à–∞—é—Å—å")
        butt52 = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup500.row(butt51)
        markup500.row(butt52)
        bot.send_message(message.chat.id, "–†–∞–∑–º–µ—â–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã –Ω–µ—Å—ë—Ç–µ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞, –≤ —Å–ª—É—á–∞–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É, —Å –ø–æ—Å–ª–µ–¥—É—â–µ–º –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ–º –∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–µ–º –ø—Ä–∏–≥–æ–≤–æ—Ä–∞ (–±–∞–Ω –∏–ª–∏ –∫—Ä—É–ø–Ω—ã–π —à—Ç—Ä–∞—Ñ –≤ –æ–±–æ–∏—Ö –≤–∞–ª—é—Ç–∞—Ö)", reply_markup=markup500)
        bot.register_next_step_handler(message, aic_sell_fin, disc = disc, start_price = start_price, file_name = file_name)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=["auc"])
def auc_buy_out(message):
    try:
        auc = db.getMas('auction.txt')
        out = ''
        for i in auc:
            out += i[0] + ":\n"+"'" + i[1] + "' \n<b>–¶–µ–Ω–∞:</b> " + i[2]
            if i[3] != "#@#":
                out += "   <u>(1 —Ñ–æ—Ç–æ)</u> \n\n"
            else: 
                out += "\n\n"
        bot.send_message(message.chat.id, out, parse_mode="html")
        bot.register_next_step_handler(message, auc_buy_vib)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def auc_buy_vib(message):
    try:
        auc = db.getMas('auction.txt')
        c = message.text.strip()
        markup777 = telebot.types.ReplyKeyboardMarkup()
        butt71 = telebot.types.KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É")
        butt72 = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup777.add(butt71, butt72)
        if c.isdigit():
            vibor = int(c)-1
            if auc[vibor][3] != "#@#":
                with open (auc[vibor][3], 'rb') as ph:
                    bot.send_photo(message.chat.id, ph)
            else:
                bot.send_message(message.chat.id, "*–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*")

            bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ: "+auc[vibor][1], reply_markup=markup777)
            bot.register_next_step_handler(message, auc_buy_pred, vib = vibor)
            
        else:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –ù–û–ú–ï–† –∞—É–∫—Ü–∏–æ–Ω–∞")
            #bot.register_next_step_handler(message, auc_buy_vib)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def auc_buy_pred(message, vib):
    try:
        if message.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ü–µ–Ω—É:")
            bot.register_next_step_handler(message, auc_buy_buy, vib = vib)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    

def auc_buy_buy(message, vib):
    try:
        c = message.text.strip()
        if c.isdigit() :
            auc = db.getMas('auction.txt')
            if auc[vib][0] != "@"+str(message.from_user.username):
                if int(c) > int(auc[vib][2]):
                    auc[vib][2] = str(c)
                    auc[vib][4] = str(int(round(tm.time())))
                    auc[vib][5] = "@"+str(message.from_user.username)
                    bot.send_message(message.chat.id, "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞")
                    db.wrTo(auc, 'auction.txt')
                    active_plus(message)
                else:
                    bot.send_message(message.chat.id, f"–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –ø—Ä–µ–¥–∏–¥—É—â–µ–π, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {auc[vib][2]}")
                    bot.register_next_step_handler(message, auc_buy_buy, vib = vib)
            else:
                bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ —Ü–µ–Ω—É")
        else:
            bot.send_message(message.chat.id, "–¶–ï–ù–£!!!! –≠–¢–û –¢–ï–ö–°–¢, –ê –ù–£–ñ–ù–ê –¶–ï–ù–ê")
            bot.register_next_step_handler(message, auc_buy_buy, vib = vib)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["auc_cl"])
def auc_cl_main(message):
    try:
        auc = db.getMas('auction.txt')
        out = ''
        for i in auc:
            out += i[0] + ":\n"+"'" + i[1] + "' \n<b>–¶–µ–Ω–∞:</b> " + i[2]
            if i[3] != "#@#":
                out += "   <u>(1 —Ñ–æ—Ç–æ)</u> \n\n"
            else: 
                out += "\n\n"
        bot.send_message(message.chat.id, out, parse_mode="html")
        bot.register_next_step_handler(message, auc_cl_vib)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def auc_cl_vib(message):
    try:
        c = message.text.strip()
        if c.isdigit():
            vib = int(c)-1
            auc = db.getMas('auction.txt')
            users = db.getMas('users.txt')
            seller = db.find_string(users, auc[vib][0])
            buyer = db.find_string(users, auc[vib][5])
            if auc[vib][0] == "@"+str(message.from_user.username):
                seller_cb = int(users[seller][2])+int(auc[vib][2])
                buyer_cb = int(users[buyer][2])-int(auc[vib][2])

                users[seller][2] = seller_cb
                users[buyer][2]=buyer_cb

                bot.send_message(users[buyer][3], f"üîî–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {auc[vib][1]}")
                bot.send_message(users[seller][3], f"üîî{auc[vib][5]} –ø—Ä–∏–æ–±—Ä–µ–ª –≤–∞—à —Ç–æ–≤–∞—Ä –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ {auc[vib][2]}")
                if auc[vib][3] != "#@#":
                    os.remove(auc[vib][3])

                active_plus(message)

                del auc[vib]
            else:
                bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —á—É–∂–æ–π –∞—É–∫—Ü–∏–æ–Ω")
            db.wrTo(auc, 'auction.txt')
            db.wrTo(users, 'users.txt')
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=["casino"])
def casino_main(message):
    bot.send_message(message.chat.id, "ü§ñ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ")
    markup787 = telebot.types.ReplyKeyboardMarkup()
    butt_cas = telebot.types.KeyboardButton("–û–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Çüé∞")
    butt_cas1 = telebot.types.KeyboardButton("–¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–ª–µ—Å–æüé®")
    markup787.add(butt_cas, butt_cas1)
    bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É:", reply_markup=markup787)

    bot.register_next_step_handler(message, cas_ch)

def cas_ch(message):
    global jackpot
    text = message.text.strip()
    match text:
        case "–û–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Çüé∞":
            markup707 = telebot.types.ReplyKeyboardMarkup()
            butt_cas2 = telebot.types.KeyboardButton("10")
            butt_cas3 = telebot.types.KeyboardButton("50")
            butt_cas4 = telebot.types.KeyboardButton("100")
            butt_cas5 = telebot.types.KeyboardButton("‚ùå–í—ã–π—Ç–∏")
            markup707.row(butt_cas2); markup707.row(butt_cas3); markup707.row(butt_cas4); markup707.row(butt_cas5) 
            bot.send_message(message.chat.id, "<b>–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É (–∫.–ª.)</b> \n\nüìå<i>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –≤—Ä—É—á–Ω—É—é</i>", parse_mode="html", reply_markup=markup707)
            bot.send_message(message.chat.id, "–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏:\nüçÅüçÅüçÅ - 1x\nüçíüçíüçí - 5x\nü•ïü•ïü•ï - 10x\nüíéüíéüíé - 50x\nüíØüíØüíØ - 100x\n\nü•ïü•ïüçí - 25x\nüíéüçÅüíé - 65x\nüçíü•ïüçí - 69x\nüíØüíØüçí - 70x\nüíØüíéüçÅ - 80x")
            bot.send_message(message.chat.id, f"–î–∂–µ–∫–ø–æ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{jackpot}</b>üçÅ", parse_mode="html")
            bot.register_next_step_handler(message, cas_game_bandit)
        case "–¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–ª–µ—Å–æüé®":
            bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –∏–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞( <b>CobyaCoin Team</b> —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —ç—Ç–∏–º", parse_mode="html")
def cas_game_bandit(message):
    global center_bank_leaves
    global jackpot

    text = message.text.strip()
    us = db.getMas("users.txt")
    user = db.find_string(us, "@"+str(message.from_user.username))
    string = "‚¨ú‚¨ú‚¨ú"
    string2 = list(string)
    win = 0
    try:
        if text.isdigit():
            stavka = int(text)
            if int(us[user][1]) > stavka:
                bot.send_message(message.chat.id, "–í—Ä–∞—â–∞–µ–º –±–∞—Ä–∞–±–∞–Ω...")
                b_mes = bot.send_message(message.chat.id, string)
                r.seed(b_mes.id)
                for i in range(0, 3):
                    for j in range(5):
                        string2 = list(string)
                        string2[i] = r.choice(["üçí", "üçí","üçí","üçí","ü•ï","ü•ï","ü•ï", "üíé","üíé", "üçÅ","üçÅ","üçÅ","üçÅ","üçÅ", "üíØ", "üíØ"])
                        if ''.join(string2) != string:
                            string = ''.join(string2)
                            bot.edit_message_text(text=string, message_id=b_mes.id, chat_id=message.chat.id)
                            tm.sleep(0.2)
                    
                
                win = stavka*(-1)
                match string:
                    case "üçíüçíüçí":
                        win = stavka*5
                    case "ü•ïü•ïü•ï":
                        win = stavka*10
                    case "üíéüíéüíé":
                        win = stavka*50
                    case "üçÅüçÅüçÅ":
                        win = stavka
                    case "üíØüíØüíØ":
                        win = jackpot+stavka
                        jackpot = 10000
                        center_bank_leaves-=10000
                    case "ü•ïü•ïüçí":
                        win = stavka*25
                    case "üíéüçÅüíé":
                        win = stavka*65
                    case "üçíü•ïüçí":
                        win = stavka*69
                    case "üíØüíØüçí":
                        win = stavka*70
                    case "üíØüíéüçÅ":
                        win = stavka*80
                    
                if win < 0:
                    jackpot+=(win*(-1)//2)
                    center_bank_leaves+=(win*(-1)//2)
                else:
                    center_bank_leaves+=(win*(-1))

                bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª <b>{win}</b>", parse_mode="html")
                bot.send_message(message.chat.id, f"–î–∂–µ–∫–ø–æ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{jackpot}</b>üçÅ", parse_mode="html")
                us[user][1] = str(int(us[user][1])+win)
                if int(us[user][5]) < win:
                    us[user][5] = win
                
                
                db.wrTo(us, 'users.txt')
                active_plus(message)
                bot.register_next_step_handler(message, cas_game_bandit)
            else:
                bot.send_message(message.chat.id, "‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        elif text == "‚ùå–í—ã–π—Ç–∏": bot.send_message(message.chat.id, "‚úÖ–ó–∞—Ö–æ–¥–∏—Ç–µ –µ—â—ë!")
        else:
            bot.send_message(message.chat.id, "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=["account", "me"])
def me_main(message):
    mg = db.getMas("mining.txt")
    us = db.getMas("users.txt")
    usn = "@"+str(message.from_user.username)
    user = db.find_string(us, "@"+str(message.from_user.username))
    mining_user = db.find_string(mg, "@"+str(message.from_user.username))
    if user != None:
        bot.send_message(message.chat.id, f"üë§–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usn}")
        bot.send_message(message.chat.id, f"üèõ–ë–∞–ª–∞–Ω—Å:\n{us[user][1]}üçÅ–∫.–ª.\n{us[user][2]}üí∞CBC")
        bot.send_message(message.chat.id, f"üìä–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n{us[user][4]}")
        if mining_user != None:
            bot.send_message(message.chat.id, f"‚õè–ú–∞–π–Ω–∏–Ω–≥:\n–£—Ä–æ–≤–µ–Ω—å: {mg[mining_user][1]}\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç: {mg[mining_user][2]}")

        markup709 = telebot.types.ReplyKeyboardMarkup()
        butt_cas2 = telebot.types.KeyboardButton("üîó–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
        butt_cas3 = telebot.types.KeyboardButton("‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
        butt_cas4 = telebot.types.KeyboardButton("‚ùå–í—ã–π—Ç–∏")
        markup709.row(butt_cas2); markup709.row(butt_cas3); markup709.row(butt_cas4)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup709)
        bot.register_next_step_handler(message, me_butt)
def me_butt(message):
    text = message.text.strip()
    match text:
        case "üîó–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É":
            string = 'L'
            for i in range(0, 8):
                string = string+r.choice(list("1234567890qwertyuiopasdfghjklzxcvbnm"))
            string = string + "_usern_" + message.from_user.username
            db.addMass([string[1:], "10000", "50"], "referals.txt")
            ref = "http://t.me/Cobya3bot?start=" + string
            bot.send_message(message.chat.id, f"üîó–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n{ref}")
        case "‚ùå–í—ã–π—Ç–∏":
            bot.send_message(message.chat.id, "‚úÖ–ó–∞—Ö–æ–¥–∏—Ç–µ –µ—â–µ!")
        case "‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞":
            bot.send_message(message.chat.id, "Coming soon...")

bot.infinity_polling()
#created by Lamba_40 and @sosietykolyan